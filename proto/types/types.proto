syntax = "proto3";

package tendermint.proto.types;
option  go_package = "github.com/tendermint/tendermint/proto/types";

import "third_party/proto/gogoproto/gogo.proto";

// BlockIdFlag indicates which BlcokID the signature is for
enum BlockIDFlag {
  option (gogoproto.goproto_enum_stringer) = false;
  option (gogoproto.goproto_enum_prefix)   = false;
  BLOCKD_ID_FLAG_UNKNOWN                   = 0;
  BLOCK_ID_FLAG_ABSENT = 1 [(gogoproto.enumvalue_customname) = "BlockIDFlagAbsent"];
  BLOCK_ID_FLAG_COMMIT = 2 [(gogoproto.enumvalue_customname) = "BlockIDFlagCommit"];
  BLOCK_ID_FLAG_NIL    = 3 [(gogoproto.enumvalue_customname) = "BlockIDFlagNil"];
}

// SignedMsgType is a type of signed message in the consensus.
enum SignedMsgType {
  option (gogoproto.goproto_enum_stringer) = false;
  option (gogoproto.goproto_enum_prefix)   = false;
  SIGNED_MSG_TYPE_UNKNOWN                  = 0;
  PREVOTE_TYPE                             = 1 [(gogoproto.enumvalue_customname) = "PrevoteType"];
  PRECOMMIT_TYPE                           = 2 [(gogoproto.enumvalue_customname) = "PrecommitType"];
  PROPOSAL_TYPE                            = 3 [(gogoproto.enumvalue_customname) = "ProposalType"];
}

// PartsetHeader
message PartSetHeader {
  uint32 total = 1;
  bytes  hash  = 2;
}

// BlockID
message BlockID {
  bytes         hash         = 1;
  PartSetHeader parts_header = 2 [(gogoproto.nullable) = false];
}
